1.POWER

#include<iostream>
using namespace std;
double recurse(double b,double p)
{
    if (p==0)
    {
        return 1;
    }
    else if(p==1)
    {
        return b;
    }
    else
    {
        return (b*recurse(b,p-1));
    }
}

int main()
{
    double b,p;
    cout<<"enter the base"<<endl;
    cin>>b;
    cout<<"enter the power"<<endl;
    cin>>p;
    cout<<"power of number is"<<recurse(b,p);
    return 0;
}



2.AVG

#include<iostream>
using namespace std;
int main ()
{
int n,i,a,sum;
float avg;
cout<<"\nEnter the no of elements:"<<endl;
cin>>n;
for(i=0;i<n;i++)
{
cout<<"Enter the number"<<i+1<<": ";
cin>>a;
sum=sum+a;
avg=sum/n;
}
cout<<"Avg of "<<n<<" numbers : "<<avg;
    return 0;
}


3.CLASS AND OBJECT

#include<iostream>
using namespace std;
class analysis
{
    int res;
    int id;

    public:
    void getdata(int sid,int sres)
    {
        res=sres;
        id=sid;
    }
    void display()
    {
        cout<<" the student id is"<<id<<endl;
        cout<<"the student result is"<<res<<endl;
    }

};
int main()
{    analysis a[10];
    int sid,sres,pass=0,fail=0,i,n;
    cout<<"enter the number of student"<<endl;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cout<<"enter the student id"<<endl;
        cin>>sid;
        cout<<"enter the student result 1 for pass and 0 for fail"<<endl;
        cin>>sres;
        if(sres==1)
        {
            pass++;
        }
        else
        {
            fail++;
        }
    
        a[i].getdata(sid,sres);
    }
    for(i=0;i<n;i++)
    {
        a[i].display();
    }
    cout<<"number of pass student is"<<pass<<endl;
    cout<<"the number of fail student is"<<fail<<endl;
    if(pass>=8)
    {
        cout<<"tution raised !"<<endl;
    }
    return 0;
}




4.VOLUME

#include<iostream>
    using namespace std;
    double vol(double,double);
     long vol(int,int,int);
    int vol(int);
     
    int main()
    {
        int r,h,l,b;
        cout<<"Enter radius and height of a cylinder:";
        cin>>r>>h;
        cout<<"Enter side of cube:";
        cin>>l;
        cout<<"Enter sides of Box: ";
        cin>>b>>h>>l;
        cout<<"Volume of cylinder is "<<vol(r,h);
        cout<<"\nVolume of cube is "<<vol(l);
        cout<<"\nVolume of Box is "<<vol(b,h,l);
        return 0;
    }
    long vol(int l,int b,int h)
    {
        return(l*b*h);
    }
    double vol(double r,double h)
    {
        return(3.14*r*r*h);
    }
    int vol(int l)
    {
        return(l*l*l);
    }




5.MANAGER

#include<iostream>
using namespace std;
class manager
{
    char name[30];
    int salary;
    public:
    void getdata()
    {
        cout<<"enter the name"<<endl;
        cin>>name;
        cout<<"enter the salary"<<endl;
        cin>>salary;
    }
    void display()
    {
        cout<<"name "<<name<<endl;
        cout<<"salary "<<salary<<endl;
    }
};
int main()
{
    manager a[10];
    int n,i;
    cout<<"enter the number of managers "<<endl;
    cin>>n;
    for(i=0;i<n;i++)
    {
        a[i].getdata();
        
    }
    for(i=0;i<n;i++)
    {
        a[i].display();
    }
    return 0;

}




6.SWAP FRIEND FUNCTION
#include<iostream>
using namespace std;
class BB;
class AA
{
    int a1;
    public:
    void getdata(int l)
    {
        a1=l;
    }
    void display()
    {
        cout<<"the value of a is "<<a1<<endl;
    }
    friend void swap(AA &a,BB &b);
};
class BB
{
    int b1;
    public:
    void getdata(int m)
    {
        b1=m;
    }
    void display()
    {
        cout<<"the value of b is"<<b1<<endl;
    }
   friend void swap(AA &a,BB &b);
};
void swap(AA &a,BB &b)
{
    int temp;
    temp=a.a1;
    a.a1=b.b1;
    b.b1=temp;
}
int main()
{  AA a;
   BB b;
   a.getdata(10);
   b.getdata(20);
   a.display();
   b.display();
   swap(a,b);
   a.display();
   b.display();
   return 0;
}




7.EXCEPTION HANDLING

#include<iostream>
using namespace std;
class Exception
{
    int car,age;
    char city[30];
    public:
    void getdata()
    {
        cout<<"enter the age"<<endl;
        cin>>age;
        cout<<"enter the number of vehicle"<<endl;
        cin>>car;
        cout<<"enter the city"<<endl;
        cin>>city;
    }
void checkcondition()
{
      try
    {
        if(age<18||age>60)
        {
            throw " age should be grater than 18 and less than 60 ";
        }
    }
        catch(const char * msg)
        {
            cerr<<msg<<endl;
        }

      try
    {
        if(car!=4)
        {
            throw " car shuold be 4";
        }
    }
        catch(const char * msg)
        {
            cerr<<msg<<endl;
        }

    

 try
    {
        if(city!="pune"||city!="Pune")
        {
            throw " city should be pune";
        }
    }
        catch(const char * msg)
        {
            cerr<<msg<<endl;
        }

    
}
};

int main()
{
    Exception handling;
    handling.getdata();
    handling.checkcondition();
    return 0;
}



8.FILE HANDLING

#include<iostream> 
#include<iomanip> 
#include<fstream> 
#include<string.h> 
using namespace std; 
class Student 
{ 
        public: 
                  char name[30]; 
                  int id; 
 
                 void input_data() 
                { 
                       cout<<"Enter the Name:"; 
                       cin>> name; 
                       cout<<"Enter the ID:"; 
                       cin>>id; 
                } 
                void put_data() 
               { 
                       cout<<setw(10)<<name<<setw(10)<<id<<endl; 
               } 
        }; 
 
int main() 
{ 
     Student rec; 
     int ID; 
     int pos,choice,offset,i; 
     fstream fp; 
 

 
     ifstream in; 
     ofstream out; 
     char nm[20]; 
     char ans; 
     do 
     { 
          cout<<"\n1.Read file"; 
          cout<<"\n2.Write file"; 
          cout<<"\n3.Determine Name if ID number is specified"; 
          cout<<"\n4.Determine ID if name is specified"; 
          cout<<"\n5.Update ID number"; 
          cout<<"\nEnter the choice:"; 
          cin>>choice; 
         switch(choice) 
          { 
             case 1: 
                in.open("test.txt",ios::in|ios::binary); 
                cout<<"\nThe contents of file are:\n"; 
                while(in.read((char*)&rec,sizeof(rec))) 
                { 
                    rec.put_data(); 
                } 
                in.close(); 
                break; 
             case 2: 
                rec.input_data(); 
                char ch; 
                cin.get(ch); 
                out.open("test.txt",ios::out|ios::app|ios::binary); 
                out.write((char*)&rec,sizeof(rec)); 
                out.close(); 
                break; 
 

 
             case 3: 
                cout<<"\nEnter the ID:"; 
                cin>>ID; 
                fp.open("test.txt",ios::ate|ios::in|ios::out|ios::binary); 
                fp.seekg(0,ios::beg); 
                pos=-1; 
                i=0; 
                while(fp.read((char*)&rec,sizeof(rec))) 
                { 
                    if(ID == rec.id) 
                    { 
                        pos = i; 
                        break; 
                    } 
                    i++; 
                } 
                offset=pos*sizeof(rec); 
                fp.seekp(offset); 
                fp.read((char*)&rec,sizeof(rec)); 
                cout<<"\nName:"<<rec.name; 
                fp.close(); 
                break; 
            case 4: 
                cout<<"\nEnter the Name:"; 
                cin>>nm; 
                fp.open("test.txt",ios::ate|ios::in|ios::out|ios::binary); 
                fp.seekg(0, ios::beg); 
                pos = -1; 
                i = 0; 
                while(fp.read((char*)&rec,sizeof(rec))) 
                { 
                    if((strcmp(nm,rec.name))==0) 
 
 
                    { 
                        pos = i; 
                        break; 
                    } 
                    i++; 
                } 
                offset = pos*sizeof(rec); 
                fp.seekp(offset); 
                fp.read((char*)&rec, sizeof(rec)); 
                cout<<"\nID:"<<rec.id; 
                fp.close(); 
                break; 
 
            case 5: 
                cout<<"\nEnter the Name:"; 
                cin>>nm; 
                fp.open("test.txt",ios::ate|ios::in|ios::out|ios::binary); 
                fp.seekg(0,ios::beg); 
                pos = -1; 
                i=0; 
                while(fp.read((char*)&rec,sizeof(rec))) 
                { 
                    if((strcmp(nm,rec.name)) == 0) 
                    { 
                        pos = i; 
                        break; 
                    } 
                    i++; 
                } 
                offset = (pos)*sizeof(rec); 
                fp.seekp(offset); 
                cout<<"\nCurrent ID :"<<rec.id; 
 

                cout<<"\nEnter new ID:"; 
                cin>>ID; 
                rec.id=ID; 
                fp.write((char*)&rec,sizeof(rec))<<flush; 
                cout<<"\nrecord updated !!\n"; 
                fp.seekg(0); 
                while(fp.read((char*)&rec,sizeof(rec))) 
                { 
                    rec.put_data(); 
                } 
                fp.close(); 
                break; 
            } 
            cout<<"\n Do You want to continue?(y/n)"; 
            cin>>ans; 
        }while(ans=='y'); 
        return 0; 
       } 
 
 
